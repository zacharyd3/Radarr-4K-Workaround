#!/bin/bash

#####################################
#
# 	Created by: zacharyd3
#
#####################################
#
# 	Declare	Variables
#
#####################################


#Start Debugging (set as 1 to enable basic info, 2 shows all steps and comparison info)
debug=2
#Enable testing mode to simulate the move without actually moving any files (0 = moves files, 1 = Test)
testing=0
#Start counting the renaming passes made
passNumber=1
#Set the recycle bin locations
binLocation=/mnt/user/Downloads/.Recycle.Bin/
binMovie=/mnt/user/Downloads/.Recycle.Bin/Movies/
binTV=/mnt/user/Downloads/.Recycle.Bin/TV/
#Set the library locations
movieFolderRoot=/mnt/user/Videos/Movies/
tvFolderRoot=/mnt/user/Videos/TV/
#Set Date and Time variables
currentDate=$(date +'%m/%d/%Y')
currentTime=$(date +'%H:%M')

#If testing is enabled, automatically switch to debug mode 2
if [[ $testing -eq 1 && $debug -le 2 ]]; then
	debug=2
	echo "<font color='blue'><b>Testing is enabled, enabling advanced debugging.</b></font>"
fi

#####################################
#
# 	Recycle Bin Upkeep
#
#####################################

echo "<hr>"
echo "<font color='blue'><b>Recycle Bin scan started!</b></font>"
echo ""
echo "<hr>"

#Checks if the movies recycle bin exists
if [[ ! -d "${binMovie}" ]]; then
	echo "<font color='orange'><b>Movie bin not found!</b></font>"
#Creates directory if it's missing
	mkdir "${binMovie}"
	echo "<font color='green'><b>Directory created.</b></font>"
	else
	echo "<font color='green'><b>Movie bin already exists.</b></font>"
fi

#Checks if the tv show recycle bin exists
if [[ ! -d "${binTV}" ]]; then
	echo "<font color='orange'><b>TV Show bin not found!</b></font>"
#Creates directory if it's missing
	mkdir "${binTV}"
	echo "<font color='green'><b>Directory created.</b></font>"
else
	echo "<font color='green'><b>TV Show bin already exists.</b></font>"
fi
echo ""

#####################################
#
# 	Unneeded File Remover
#
#####################################

#Checks that the Recycle Bin is setup
if [[ -d "${binLocation}" && "$testing" -eq 0 ]]; then
	cd "${binLocation}"
#Finds all "extra" files and deletes them before moving any videos.
	find . -name "*.nfo" -type f -delete
	find . -name "*.srt" -type f -delete
	find . -name "*.ass" -type f -delete
	find . -name "*.jpg" -type f -delete
	if [ $debug -ge "2" ]; then
		echo "<font color='green'><b>Removed extra files (subtitles, images, info). </b></font>"
	fi
fi

#####################################
#
# 	Low-res Movie Sorter
#
#####################################

#Declare variables
passNumber=1
inUse=0
rCheck=0
vCheck=0

echo "<hr>"
echo "<font color='blue'><b>Copying Low-res movies back.</b></font>"
echo ""
echo "<hr>"

#Check the files in the recycle bin
for file in "$binMovie"*
do
#Check if the file is a directory, if so, check it for movies
	if [ -d "${file}" ]; then
		directory=$file/
		for movieFile in "${directory}"*
		do
			if [ -f "${movieFile}" ]; then
#Parse the movie data from the filenames that were found 
				if [ $debug -ge "2" ]; then
					echo "<font color='green'><b>Original File name: </b></font>""$movieFile"
				fi
				parseNameOld0=$(echo "$movieFile" | cut -d'/' -f7) #<<Change this number
				parseNameOld0=$(echo "$parseNameOld0" | cut -d'[' -f1)
				parseNameOld1=$(echo "$parseNameOld0" | cut -d'(' -f1) #Saves the original Movie name too (if the folder has a year it breaks things so this is needed)
				parseNameOld0=$(echo "$parseNameOld0" | xargs) #xargs removes leading and trailing whitespace.
				parseNameOld1=$(echo "$parseNameOld1" | xargs) #xargs removes leading and trailing whitespace.
				parseExt=$(echo "$movieFile" | cut -d'.' -f5)
				if [ $debug -ge "1" ]; then
					echo "<font color='green'><b>Original Movie name: </b></font>""$parseNameOld1"
				fi
#Check if the recycled file is in use.
				if lsof "$movieFile" > /dev/null; then
					echo "<font color='orange'><b>The file is in use, skipping.</b></font>"
					echo ""
					((inUse=1))
				else
					((inUse=0))
				fi
#Check if the recycled file is a video
				if [[ $movieFile == *"mkv" || *"m2ts" || *"mp4" ]]; then
					((vCheck=0)) #Resets the Video Check for a new file
				else 
					if [[ $debug -ge "1" && "$inUse" -eq 0 ]]; then
						echo "<font color='orange'><b>File isn't a video, skipping</b></font>"
						echo ""
					fi
					((vCheck=1))					
				fi
#Check if the recycled file is 1080p.
				if [[ $movieFile != *"1080p"* && "$vCheck" -eq "0" && "$inUse" -eq 0 ]]; then
					if [ $debug -ge "1" ]; then
						echo "<font color='orange'><b>The file is not 1080p, skipping.</b></font>"
						echo ""
					fi
					((rCheck=1))
				else
					((rCheck=0))
				fi
#Turn the parsed movie name into a folder
				movieFolder0=$movieFolderRoot$parseNameOld0
				movieFolder1="${movieFolder0}/"
				if [[ $debug -ge "1" && "$vCheck" -eq "0" && "$rCheck" -eq "0" ]]; then
					echo "<font color='green'><b>Searching for 4K Movie folder: </b></font>""$movieFolder1"
				fi
#Test if the movie folder exists
				if [[ -d "${movieFolder1}" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
					if [ $debug -ge "1" ]; then
						echo "<font color='green'><b>Found matching 4K Movie Folder.</b></font>"
					fi
					cd "${movieFolder1}" || exit
#Search the movie folder for a 4K copy 
					foundNew=$(find ./ -type f \( -iname \*2160p*.mkv -o -iname \*2160p*.m2ts -o -iname \*2160p*.mp4 \) -maxdepth 1 -print -quit)
					if [[ "$foundNew" != "" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
						if [ $debug -ge "1" ]; then
							echo "<font color='green'><b>Found matching 4K Movie: </b></font>""$foundNew"
						fi
					fi
					if [[ "$foundNew" = "" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
						echo "<font color='orange'><b>No matching 4K file found, skipping.</b></font>"
						echo ""
					fi
#Parse the found 4K copy name
				if [[ "$foundNew" == *"2160p"* && "$vCheck" -eq "0" ]]; then
					parseNameNew0=$(echo "$foundNew" | cut -d'[' -f1)
					parseNameNew0=$(echo "$parseNameNew0" | cut -d'/' -f2)
					parseNameNew0=$(echo "$parseNameNew0" | xargs) #xargs removes leading and trailing whitespace
					if [ $debug -ge "2" ]; then
						echo "<font color='red'><b>Name Comparison:</b></font> |" "$parseNameOld1" "|" "$parseNameNew0" "|"
					fi
						if [[ "${parseNameOld1}" != "${parseNameNew0}" && $debug -ge "2" && $inUse -eq "0" ]]; then
							echo "<font color='red'><b>No match found. </b></font>"
							echo ""
						fi
						if [ "${parseNameOld1}" == "${parseNameNew0}" ]; then
							if [ "${parseExt}" != "nfo" ]; then
								if [ $debug -ge "2" ] && [ $inUse -eq "0" ]; then
									echo "<font color='red'><b>Files Checked: </b></font>"$passNumber
								fi
								((passNumber++))
								if [ $testing -eq "0" ]; then
									mv "${movieFile}" "${movieFolder1}"
									/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$parseNameNew0 $parseExt has been copied back." -i "normal"
									echo "$currentDate,$currentTime,Movies,1080p,$parseNameNew0," >> "/mnt/user/Backups/4K_Copier_History.csv"
								fi
								echo "<font color='blue'><b>""$parseNameNew0"" ""$parseExt"" moved.</b></font>"
								echo ""
							fi
						fi
					fi
				fi
			fi
		done
	fi
done

if [[ $passNumber -eq "1" ]]; then
	echo "No files to process"
	echo ""
fi

#####################################
#
# 	4K Movie Sorter
#
#####################################

#Declare variables
passNumber=1
inUse=0
rCheck=0
vCheck=0

echo "<hr>"
echo "<font color='blue'><b>Copying 4K Movies back.</b></font>"
echo ""
echo "<hr>"

#Check the files in the recycle bin
for file in "$binMovie"*
do
#Check if the file is a directory, if so, check it for movies
	if [ -d "${file}" ]; then
		directory=$file/
		for movieFile in "${directory}"*
		do
			if [ -f "${movieFile}" ]; then
#Parse the movie data from the filenames that were found 
				if [ $debug -ge "2" ]; then
					echo "<font color='green'><b>Original File name: </b></font>""$movieFile"
				fi
				parseNameOld0=$(echo "$movieFile" | cut -d'/' -f7) #<<Change this number
				parseNameOld0=$(echo "$parseNameOld0" | cut -d'[' -f1)echo "$parseNameOld0"
				parseNameOld1=$(echo "$parseNameOld0" | cut -d'(' -f1) #Saves the original Movie name too (if the folder has a year it breaks things so this is needed)
				parseNameOld0=$(echo "$parseNameOld0" | xargs) #xargs removes leading and trailing whitespace.
				parseNameOld1=$(echo "$parseNameOld1" | xargs) #xargs removes leading and trailing whitespace.
				parseExt=$(echo "$movieFile" | cut -d'.' -f5)
				if [ $debug -ge "1" ]; then
					echo "<font color='green'><b>Original Movie name: </b></font>""$parseNameOld1"
				fi
#Check if the recycled file is in use.
				if lsof "$movieFile" > /dev/null; then
					echo "<font color='orange'><b>The file is in use, skipping.</b></font>"
					echo ""
					((inUse=1))
				else
					((inUse=0))
				fi
#Check if the recycled file is a video
				if [[ $movieFile == *"mkv" || *"m2ts" || *"mp4" ]]; then
					((vCheck=0)) #Resets the Video Check for a new file
				else 
					if [[ $debug -ge "1" && "$inUse" -eq 0 ]]; then
						echo "<font color='orange'><b>File isn't a video, skipping</b></font>"
						echo ""
					fi
					((vCheck=1))					
				fi
#Check if the recycled file is 4K.
				if [[ $movieFile != *"2160p"* && "$vCheck" -eq "0" && "$inUse" -eq 0 ]]; then
					if [ $debug -ge "1" ]; then
						echo "<font color='orange'><b>The file is not 4K, skipping.</b></font>"
						echo ""
					fi
					((rCheck=1))
				else
					((rCheck=0))
				fi
#Turn the parsed movie name into a folder
				movieFolder0=$movieFolderRoot$parseNameOld0
				movieFolder1="${movieFolder0}/"
				if [[ $debug -ge "1" && "$vCheck" -eq "0" && "$rCheck" -eq "0" ]]; then
					echo "<font color='green'><b>Searching for Low-res Movie folder: </b></font>""$movieFolder1"
				fi
#Test if the movie folder exists
				if [[ -d "${movieFolder1}" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
					if [ $debug -ge "1" ]; then
						echo "<font color='green'><b>Found matching Low-res Movie Folder.</b></font>"
					fi
					cd "${movieFolder1}"
#Search the movie folder for a 1080p copy 
					foundNew=$(find ./ -type f \( -iname \*1080p*.mkv -o -iname \*1080p*.m2ts -o -iname \*1080p*.mp4 \) -maxdepth 1 -print -quit)
					if [[ "$foundNew" != "" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
						if [ $debug -ge "1" ]; then
							echo "<font color='green'><b>Found matching Low-res Movie: </b></font>""$foundNew"
						fi
					fi
					if [[ "$foundNew" = "" && "$vCheck" -eq "0" && "$rCheck" -eq "0" && "$inUse" -eq "0" ]]; then
						echo "<font color='orange'><b>No matching Low-res file found, skipping.</b></font>"
						echo ""
					fi
#Parse the found 1080p copy name
				if [[ "$foundNew" == *"1080p"* && "$vCheck" -eq "0" ]]; then
					parseNameNew0=$(echo "$foundNew" | cut -d'[' -f1)
					parseNameNew0=$(echo "$parseNameNew0" | cut -d'/' -f2)
					parseNameNew0=$(echo "$parseNameNew0" | xargs) #xargs removes leading and trailing whitespace
					if [ $debug -ge "2" ]; then
						echo "<font color='red'><b>Name Comparison:</b></font> |" "$parseNameOld1" "|" "$parseNameNew0" "|"
					fi
						if [[ "${parseNameOld1}" != "${parseNameNew0}" && $debug -ge "2" && $inUse -eq "0" ]]; then
							echo "<font color='red'><b>No match found. </b></font>"
							echo ""
						fi
						
						if [ "${parseNameOld1}" == "${parseNameNew0}" ]; then
							if [ "${parseExt}" != "nfo" ]; then
								if [ $debug -ge "2" ] && [ $inUse -eq "0" ]; then
									echo "<font color='red'><b>Files Checked: </b></font>"$passNumber
								fi
								((passNumber++))
								if [ $testing -eq "0" ]; then
									mv "${movieFile}" "${movieFolder1}"
									/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$parseNameNew0 $parseExt has been copied back." -i "normal"
									echo "$currentDate,$currentTime,Movies,4K,$parseNameNew0," >> "/mnt/user/Backups/4K_Copier_History.csv"
								fi
								echo "<font color='blue'><b>""$parseNameNew0"" ""$parseExt"" moved.</b></font>"
								echo ""
							fi
						fi
					fi
				fi
			fi
		done
	fi
done

if [[ $passNumber -eq "1" ]]; then
	echo "No files to process"
	echo ""
fi

#####################################
#
# 	TV Show Sorter
#
#####################################

passNumber=1 #Counts how many files have been checked
inUse=0 #Saves if the file is in use and cancels
rCheck=0 #Set to 0 if it's ok to continue, 1 if it should end. (stands for Resolution Check)
vCheck=0 #Set to 0 if it's ok to continue, 1 if it skip the current file. (stands for Video Check)

echo "<hr>"
echo "<font color='blue'><b>Copying Low-res TV Show's back.</b></font>"
echo ""
echo "<hr>"

for file in "$binTV"*
do
#Start checking TV shows.
	#if [ "$(ls -A "$file")" ]; then
		directory=$file/
		for tvSeason in "${directory}"*/*
		do
			if [ -f "${tvSeason}" ]; then
				if [ $debug -ge "2" ]; then
					echo "<font color='green'><b>Full name: </b></font>""$tvSeason"
				fi
#Parse the show name, episode and season
				parseNameOld0=$(echo "$tvSeason" | cut -d'/' -f9)
				parseNameOld0=$(echo "$parseNameOld0" | cut -d'[' -f1)
				tvShowName=$(echo "$tvSeason" | cut -d'/' -f7)
				tvShowSeason=$(echo "$tvSeason" | cut -d'/' -f8)
				tvShowEpisode0=$(echo "$tvSeason" | cut -d'/' -f9)
				tvShowEpisode1=$(echo "$tvShowEpisode0" | cut -d'-' -f1 | xargs)
				if [ $debug -ge "1" ]; then
					echo "<font color='green'><b>Show name: </b></font>""$tvShowName"
					echo "<font color='green'><b>Show episode: </b></font>""$tvShowEpisode1"
				fi
#Check if the file is in use.
				if lsof "$tvSeason" > /dev/null; then
					echo "<font color='orange'><b>File is in use, skipping.</b></font>"
					echo ""
					inUse=1
				else
					inUse=0
				fi
#Check if the file is a video
				if [[ $tvSeason == *"mkv" || *"m2ts" ]]; then
					((vCheck=0)) #Resets the Video Check for a new file
					((rCheck=0)) #Resets the Continue Check for a new file
				else 
					if [[ $debug -ge "1" && "$inUse" -eq 0 ]]; then
						echo "<font color='orange'><b>File isn't a video, skipping</b></font>"
						echo ""
					fi
					((vCheck=1))					
				fi
#Ensure the recycled file is 1080p
				if [[ $tvSeason == *"1080p"* && $vCheck -eq 0 && "$inUse" -eq 0 ]]; then
				        ((rCheck=0))
				else
					if [[ $debug -ge "1" && $vCheck -eq "0" ]]; then
						echo "<font color='orange'><b>The file is not 1080p, skipping.</b></font>"
						echo ""
					fi
				((rCheck=1))
				fi
#Parse the folder and Extension
				tvShowOriginal=$tvFolderRoot$tvShowName/$tvShowSeason/
				tvShowExtension=$(echo "$tvSeason" | cut -d'.' -f5)
#Check to see if the file matches a show
				if [[ -d "${tvShowOriginal}" &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
					cd "${tvShowOriginal}" || exit
					if [[ $debug -ge "2" && $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='green'><b>Searching in folder: </b></font>""$tvShowOriginal"
					fi
#Search the folder for 4K shows
					if [[ $debug -ge "2" && $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='green'><b>Searching for: </b></font>*${tvShowEpisode1}*2160p*"
					fi
					foundNew=$(find -type f -iname "*${tvShowEpisode1}*2160p*" -print)
					if [[ "$foundNew" != "" &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						if [ $debug -ge "1" ]; then
							echo "<font color='green'><b>Found matching 4K Show: </b></font>""$foundNew"
						fi
					fi
					if [[ $debug -ge "1" && "$foundNew" = "" &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='orange'><b>No matching 4K file found, skipping.</b></font>"
						echo ""
					fi	
#Parse show name only if 4K filename found
					if [[ "$foundNew" == *"2160p"* &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						parseNameNew0=$(echo "$foundNew" | cut -d'[' -f1)
						parseNameNew0=$(echo "$parseNameNew0" | cut -d'/' -f2)
						if [ $debug -ge "2" ]; then
							echo "<font color='red'><b>Name Comparison:</b></font> |" "$parseNameOld0" "|" "$parseNameNew0" "|"
						fi
						if [ "${parseNameOld0}" == "${parseNameNew0}" ]; then
							if [ $debug -ge "2" ] && [ $inUse -eq "0" ]; then
								echo "<font color='red'><b>Files Checked: </b></font>"$passNumber
							fi
							((passNumber++))
							if [ $testing -eq "0" ]; then
								mv "${tvSeason}" "${tvShowOriginal}"
								/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$parseNameNew0 has been copied back." -i "normal"
								echo "$currentDate,$currentTime,TV Shows,1080p,$tvShowName: $tvShowEpisode1" >> "/mnt/user/Backups/4K_Copier_History.csv"
							fi
							echo "<font color='blue'><b>""$tvShowName"" ""$tvShowEpisode1"" ""$tvShowExtension"" moved.</b></font>"
							echo ""
						fi
					fi
				fi
			fi
		done
	#fi
done

if [[ $passNumber -eq "1" ]]; then
	echo "No files to process"
	echo ""
fi


#####################################
#
# 	4K TV Show Sorter
#
#####################################

passNumber=1 #Counts how many files have been checked
inUse=0 #Saves if the file is in use and cancels
rCheck=0 #Set to 0 if it's ok to continue, 1 if it should end. (stands for Resolution Check)
vCheck=0 #Set to 0 if it's ok to continue, 1 if it skip the current file. (stands for Video Check)

echo "<hr>"
echo "<font color='blue'><b>Copying 4K TV Show's back.</b></font>"
echo ""
echo "<hr>"

for file in "$binTV"*
do
#Start checking TV shows.
	#if [ "$(ls -A "$file")" ]; then
		directory=$file/
		for tvSeason in "${directory}"*/*
		do
			if [ -f "${tvSeason}" ]; then
				if [ $debug -ge "2" ]; then
					echo "<font color='green'><b>Full name: </b></font>""$tvSeason"
				fi
#Parse the show name, episode and season
				parseNameOld0=$(echo "$tvSeason" | cut -d'/' -f9)
				parseNameOld0=$(echo "$parseNameOld0" | cut -d'[' -f1)
				tvShowName=$(echo "$tvSeason" | cut -d'/' -f7)
				tvShowSeason=$(echo "$tvSeason" | cut -d'/' -f8)
				tvShowEpisode0=$(echo "$tvSeason" | cut -d'/' -f9)
				tvShowEpisode1=$(echo "$tvShowEpisode0" | cut -d'-' -f1)
				if [ $debug -ge "1" ]; then
					echo "<font color='green'><b>Show name: </b></font>""$tvShowName"
					echo "<font color='green'><b>Show episode: </b></font>""$tvShowEpisode1"
				fi
#Check if the file is in use.
				if lsof "$tvSeason" > /dev/null; then
					echo "<font color='orange'><b>File is in use, skipping.</b></font>"
					echo ""
					inUse=1
				else
					inUse=0
				fi
#Check if the file is a video
				if [[ $tvSeason == *"mkv" || *"m2ts" ]]; then
					((vCheck=0)) #Resets the Video Check for a new file
					((rCheck=0)) #Resets the Continue Check for a new file
				else 
					if [[ $debug -ge "1" && "$inUse" -eq 0 ]]; then
						echo "<font color='orange'><b>File isn't a video, skipping</b></font>"
						echo ""
					fi
					((vCheck=1))					
				fi
#Ensure the recycled file is 4K
				if [[ $tvSeason == *"2160p"* && $vCheck -eq 0 && "$inUse" -eq 0 ]]; then
					((rCheck=0))
				else
					if [[ $debug -ge "1" && $vCheck -eq "0" ]]; then
						echo "<font color='orange'><b>The file is not 4K, skipping.</b></font>"
						echo ""
					fi
					((rCheck=1))
				fi
#Parse the folder and Extension
				tvShowOriginal=$tvFolderRoot$tvShowName/$tvShowSeason/
				tvShowExtension=$(echo "$tvSeason" | cut -d'.' -f5)
#Check to see if the file matches a show
				if [ -d "${tvShowOriginal}" ]; then
					cd "${tvShowOriginal}" || exit
					if [[ $debug -ge "2" && $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='green'><b>Searching in folder: </b></font>""$tvShowOriginal"
					fi
#Search the new folder for Low-res shows
					if [[ $debug -ge "2" && $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='green'><b>Searching for: </b></font>*${tvShowEpisode1}*1080p*"
					fi
					foundNew=$(find -type f -iname "*${tvShowEpisode1}*1080p*" -print)
					if [[ "$foundNew" != "" &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						if [ $debug -ge "1" ]; then
							echo "<font color='green'><b>Found matching Low-res Show: </b></font>""$foundNew"
						fi
					fi
					if [[ $debug -ge "1" && "$foundNew" = "" &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						echo "<font color='orange'><b>No matching Low-res file found, skipping.</b></font>"
						echo ""
					fi	
#Parse name only if 1080p filename found
					if [[ "$foundNew" == *"1080p"* &&  $rCheck -eq "0" && $vCheck -eq "0" ]]; then
						parseNameNew0=$(echo "$foundNew" | cut -d'[' -f1)
						parseNameNew0=$(echo "$parseNameNew0" | cut -d'/' -f2)
						if [ $debug -ge "2" ]; then
							echo "<font color='red'><b>Name Comparison:</b></font> |" "$parseNameOld0" "|" "$parseNameNew0" "|"
						fi
						if [ "${parseNameOld0}" == "${parseNameNew0}" ]; then
							if [ $debug -ge "2" ] && [ $inUse -eq "0" ]; then
								echo "<font color='red'><b>Files Checked: </b></font>"$passNumber
							fi
							((passNumber++))
							if [ $testing -eq "0" ]; then
								mv "${tvSeason}" "${tvShowOriginal}"
								/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$parseNameNew0 has been copied back." -i "normal"
								echo "$currentDate,$currentTime,TV Shows,4K,$tvShowName: $tvShowEpisode1" >> "/mnt/user/Backups/4K_Copier_History.csv"								
							fi
							echo "<font color='blue'><b>""$tvShowName"" ""$tvShowEpisode1"" ""$tvShowExtension"" moved.</b></font>"
							echo ""
						fi
					fi
				fi
			fi
		done
	#fi
done

if [[ $passNumber -eq "1" ]]; then
	echo "No files to process"
	echo ""
fi


#####################################
#
# 	Remove Empty Directories
#
#####################################

deletedDirCount=0

echo "<hr>"
echo "<font color='blue'><b>Removing empty directories.</b></font>"
echo ""
echo "<hr>"

#Clear empty movie bins
for emptyDir in "$binMovie"*
do
#Check that the scanned item is a directory
	if [ -d "${emptyDir}" ]
	then
#Check for empty directories only
		if [[ -z $(ls -A "$emptyDir") ]]
		then
#Log individual deleted files if advanced debugging is enabled.
			if [ $debug -ge "2" ]
				then
				echo "<font color='green'><b>Deleting: </b></font>""$emptyDir"
			fi
#Actually do the removing and count how many directories have been deleted.
			if [ $testing -eq 0 ]
			then
				rmdir "${emptyDir}"
				((deletedDirCount++))
			fi
		fi
	fi
done

#Clear empty tv show season bins (This has to be done before trying to remove the show folder)
for emptyDir in "$binTV"*
do
	for emptySeason in "$binTV"*/*
	do
#Check that the scanned item is a directory
		if [ -d "${emptySeason}" ]
		then
#Check for empty directories only
			if [[ -z $(ls -A "$emptySeason") ]]
			then
#Log individual deleted files if advanced debugging is enabled.
				if [ $debug -ge "2" ]
					then
					echo "<font color='green'><b>Deleting: </b></font>""$emptySeason"
				fi
#Actually do the removing and add to how many directories have been deleted.
				if [ $testing -eq 0 ]
				then
					rmdir "${emptySeason}"
					((deletedDirCount++))
				fi
			fi
		fi
	done
done

#Clear empty tv show bins (this has to be done after removing the seasons first [above])
for emptyDir in "$binTV"*
do
#Check that the scanned item is a directory
	if [ -d "${emptyDir}" ]
	then
#Check for empty directories only
		if [[ -z $(ls -A "$emptyDir") ]]
		then
#Log individual deleted files if advanced debugging is enabled.
			if [ $debug -ge "2" ]
				then
				echo "<font color='green'><b>Deleting: </b></font>""$emptyDir"
			fi
#Actually do the removing and add to how many directories have been deleted.
			if [ $testing -eq 0 ]
			then
				rmdir "${emptyDir}"
				((deletedDirCount++))
			fi
		fi
	fi
done

#Log the deleted files and print message if testing is enabled instead.
if [ $testing -eq 0 ]
then
	echo "<font color='green'><b>Empty directories deleted: </b></font>""$deletedDirCount"
else
	echo "<font color='orange'><b>Testing is enabled, so nothing has been deleted.</b></font>"
fi

#Send a notification with total files copied.
((passNumber--))

#Notification where nothing was deleted but files were copied.
if [[ $passNumber -gt 1 && $testing -eq 0 && $deletedDirCount -eq 0 ]]
then
	/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$passNumber files have been copied." -i "warning"
fi

#Notification where directories were deleted and files were copied.
if [[ $passNumber -gt 1 && $testing -eq 0 && $deletedDirCount -gt 0 ]]
then
	/usr/local/emhttp/webGui/scripts/notify -e "Radarr Copy" -s "Copy Notifcation" -d "$passNumber files have been copied, and $deletedDirCount empty directories have been deleted." -i "warning"
fi
